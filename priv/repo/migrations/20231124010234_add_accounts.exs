defmodule HousingApp.Repo.Migrations.AddAccounts do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :email, :citext, null: false
      add :hashed_password, :text, null: false
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:user_tenants, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :role, :text, null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "user_tenants_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :tenant_id, :uuid, null: false
    end

    create table(:tokens, primary_key: false) do
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :jti, :text, null: false, primary_key: true
    end

    create table(:tenants, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
    end

    alter table(:user_tenants) do
      modify :tenant_id,
             references(:tenants,
               column: :id,
               name: "user_tenants_tenant_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:tenants) do
      add :name, :text, null: false
    end
  end

  def down do
    alter table(:tenants) do
      remove :name
    end

    drop constraint(:user_tenants, "user_tenants_tenant_id_fkey")

    alter table(:user_tenants) do
      modify :tenant_id, :uuid
    end

    drop table(:tenants)

    drop table(:tokens)

    drop constraint(:user_tenants, "user_tenants_user_id_fkey")

    drop table(:user_tenants)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end