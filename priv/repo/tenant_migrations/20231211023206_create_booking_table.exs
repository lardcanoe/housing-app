defmodule HousingApp.Repo.TenantMigrations.CreateBookingTable do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:bookings, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :start_at, :utc_datetime_usec, null: false
      add :end_at, :utc_datetime_usec, null: false
      add :data, :map, null: false, default: %{}
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :archived_at, :utc_datetime_usec

      add :tenant_id,
          references(:tenants,
            column: :id,
            name: "bookings_tenant_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :bed_id,
          references(:beds,
            column: :id,
            name: "bookings_bed_id_fkey",
            type: :uuid,
            prefix: prefix()
          ),
          null: false

      add :profile_id,
          references(:profiles,
            column: :id,
            name: "bookings_profile_id_fkey",
            type: :uuid,
            prefix: prefix()
          ),
          null: false

      add :product_id,
          references(:products,
            column: :id,
            name: "bookings_product_id_fkey",
            type: :uuid,
            prefix: prefix()
          ),
          null: false
    end

    create index(:bookings, ["profile_id"])

    create index(:bookings, ["bed_id"])

    create unique_index(:bookings, [:bed_id, :profile_id, :start_at],
             name: "bookings_unique_by_bed_profile_start_at_index"
           )
  end

  def down do
    drop_if_exists unique_index(:bookings, [:bed_id, :profile_id, :start_at],
                     name: "bookings_unique_by_bed_profile_start_at_index"
                   )

    drop constraint(:bookings, "bookings_tenant_id_fkey")

    drop constraint(:bookings, "bookings_bed_id_fkey")

    drop constraint(:bookings, "bookings_profile_id_fkey")

    drop constraint(:bookings, "bookings_product_id_fkey")

    drop_if_exists index(:bookings, ["bed_id"], name: "bookings_bed_id_index")

    drop_if_exists index(:bookings, ["profile_id"], name: "bookings_profile_id_index")

    drop table(:bookings, prefix: prefix())
  end
end