defmodule HousingApp.Repo.TenantMigrations.CreateRolesAndPermissions do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:user_tenant_roles, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true

      add :tenant_id,
      references(:tenants,
        column: :id,
        name: "user_tenant_roles_tenant_id_fkey",
        type: :uuid,
        prefix: "public"
      ),
      null: false

      add :user_tenant_id,
          references(:user_tenants,
            column: :id,
            name: "user_tenant_roles_user_tenant_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :role_id, :uuid, null: false
      add :time_period_id, :uuid
      add :start_at, :date
      add :end_at, :date
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :archived_at, :utc_datetime_usec
    end

    create index(:user_tenant_roles, ["user_tenant_id"])

    create table(:roles, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
    end

    alter table(:user_tenant_roles, prefix: prefix()) do
      modify :role_id,
             references(:roles,
               column: :id,
               name: "user_tenant_roles_role_id_fkey",
               type: :uuid,
               prefix: prefix()
             )

      modify :time_period_id,
             references(:time_periods,
               column: :id,
               name: "user_tenant_roles_time_period_id_fkey",
               type: :uuid,
               prefix: prefix()
             )
    end

    alter table(:roles, prefix: prefix()) do
      add :tenant_id,
          references(:tenants,
            column: :id,
            name: "roles_tenant_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :name, :text, null: false
      add :description, :text, default: ""
      add :permissions, {:array, :map}, null: false, default: []
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :archived_at, :utc_datetime_usec
    end

    create unique_index(:roles, [:name], name: "roles_unique_by_name_index")
  end

  def down do
    drop_if_exists unique_index(:roles, [:name], name: "roles_unique_by_name_index")

    drop constraint(:roles, "roles_tenant_id_fkey")

    alter table(:roles, prefix: prefix()) do
      remove :tenant_id
      remove :archived_at
      remove :updated_at
      remove :created_at
      remove :permissions
      remove :description
      remove :name
    end

    drop constraint(:user_tenant_roles, "user_tenant_roles_role_id_fkey")

    drop constraint(:user_tenant_roles, "user_tenant_roles_time_period_id_fkey")

    alter table(:user_tenant_roles, prefix: prefix()) do
      modify :time_period_id, :uuid
      modify :role_id, :uuid
    end

    drop table(:roles, prefix: prefix())

    drop constraint(:user_tenant_roles, "user_tenant_roles_tenant_id_fkey")

    drop constraint(:user_tenant_roles, "user_tenant_roles_user_tenant_id_fkey")

    drop_if_exists index(:user_tenant_roles, ["user_tenant_id"],
                     name: "user_tenant_roles_user_tenant_id_index"
                   )

    drop table(:user_tenant_roles, prefix: prefix())
  end
end
